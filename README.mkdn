# NAME

Type::Tiny::Signatures - Method/Function Signatures w/Type::Tiny Constraints

[![Build Status](https://travis-ci.org/alnewkirk/Type-Tiny-Signatures.png?branch=master)](https://travis-ci.org/alnewkirk/Type-Tiny-Signatures)

# VERSION

version 0.02

# SYNOPSIS

    use Type::Tiny;
    use Type::Tiny::Signatures;

    method hello (Str $greeting, Str $fullname) {
        print "$greeting, $fullname\n";
    }

# DESCRIPTION

This module uses [Function::Parameters](https://metacpan.org/pod/Function::Parameters) to extends Perl with keywords that
let you define methods and functions with parameter lists which can be validated
using [Type::Tiny](https://metacpan.org/pod/Type::Tiny) type constraints. The type constraints can be provided by
the Type::Tiny standard library, [Types::Standard](https://metacpan.org/pod/Types::Standard), or any supported
user-defined type library which can be a [Moose](https://metacpan.org/pod/Moose), [MooseX::Type](https://metacpan.org/pod/MooseX::Type),
[MouseX::Type](https://metacpan.org/pod/MouseX::Type), or [Type::Library](https://metacpan.org/pod/Type::Library) library.

    use Type::Tiny;
    use Type::Tiny::Signatures qw(MyApp::Types);

The method and function signatures can be configured to incorporate the
user-defined type constraints in routine parameter list validation by passing
the library package name as an argument to the Type::Tiny::Signatures usage
declaration. Please note, the Function::Parameters pragma will be loaded using
the defaults (i.e. not in strict-mode).

# AUTHOR

Al Newkirk <anewkirk@ana.io>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by Al Newkirk.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
